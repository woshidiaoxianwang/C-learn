#define _CRT_SECURE_NO_WARNING 1
#include<stdio.h>

//1.指针是一个变量，里面存放着地址


//2.为什么虽然指针都是一样的大小，却要区分类型？

//int main()
//{
//	int a = 0X11223344;
//	int* pa = &a;
//	//char* pc = &a;//我的编译器不兼容。
//	//如果用char类型解引用操作的话，只能操作一个字符。
//	*pa = 0;
//	printf("%p\n",pa);
//	//printf("%p\n",pc);
//	return 0;
//}
//指针类型决定了指针进行解引用操作的时候能够访问内存空间的大小
//而且，指针类型不同，对指针进行加减操作时，加1后往后跳到字节是指针类型的大小
//也就是说，指针类型决定了指针走一步走多远，决定了指针的步长。



//
////3.对于数组来说指针里面存放的是首字母的地址
//
//int main()
//{
//	int arr[10] = {0};
//	int *p = arr;//数组名-首元素的地址
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//	//这样可以把数组的每个元素都改为1
//	//但int *p 不能改char *p，因为char只有一个字节，int有4哥字节
//	return 0;
//}




//4.野指针，野指针意为指针指向位置不可知（随机的，不正确的，没有明确限制的）
//4-1啥原因会出野指针？
//（1），指针未初始化，局部变量不初始化，默认为随机值，指针同理。
//（2）指针越界访问，也会导致野指针
//int main()
//{
//	int arr[10] = {0};
//	int *p = arr;//数组名-首元素的地址
//	int i = 0;
//	for (i = 0; i < 12; i++)
//	{
//		p++;//显然，p++超出了可以控制的范围，因此也变成了野指针。
//	}
//return 0;
//}
//（3）指针指向的空间被释放

//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int *p = test();
//	printf("%d\n",*p);
//
//	return 0;
//}





//5.空指针
//int *pa = &a;//初始化
//int *p = NULL;//NULL用来初始化指针的。给指针赋值为0，这也可以用于释放指针
////指针使用之前要检测其有效性，使用空指针可能会导致崩溃




////6.指针运算
//6.1指针+/-整数，往后跳过指针类型个单位。
//6.2指针之间可以比较大小



//指针-指针
//两个指针相减，将会得到指针之间的地址跨度，表现为元素个数
//指针求字符串长度
//	int my_strlen(char*str )
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}

//7.指针和数组
//7.1标准规定：
//允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针进行比较，
//但是不允许与指向第一个元素之前的那个内存位置的指针进行比较

//7.2数组名是首元素的地址，但&数组名的时候，数组名不是首元素的地址，而是整个数组的地址
//sizeof（数组名）计算的也是整个数组的大小。
//取整个地址的时候，值上和首元素一样，但+1的跨度，整个地址也会跨整个地址的长度
//
//int main ()
//{
//	int arr[10] = {0};
//	int *p = arr;
//	int i = 0;
//	for (i = 0; i < 10;i++)
//	{
//		*(p + 1) = i;
//	}
	//用数组名指针访问数组，和用数组下标访问数组达到的效果是一样的
//}


//8. 多级指针
//就是套娃。指向指针的指针就是多级指针，
//int a = 10;
//int* pa = &a;
//int** ppa = &pa;
//int*** pppa = &ppa;
//............


//9.指针数组与数组指针
//指针数组--数组 - 存放指针的数组
//数组指针 - 指针

int main()
{
	int a  = 10;
	int b = 20;
	int c = 30;
	int* pa = &a;
	int* pb = &b;
	int* pc = &c;

	int* arr[3] = {&a, &b, &c};//这就是指针数组
	int i = 0;
	for (i = 0;i < 3;i++)
	{
		printf("%d ",*(arr[i]));
	}
	return 0;
}